<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于半夜IDEA突发恶疾</title>
      <link href="/2023/12/03/guan-yu-ban-ye-idea-tu-fa-e-ji/"/>
      <url>/2023/12/03/guan-yu-ban-ye-idea-tu-fa-e-ji/</url>
      
        <content type="html"><![CDATA[<p>如标题，大半夜的打开idea想要看一个项目（帮舍友解决问题），突然发现自己的idea.exe文件不见了！！！</p><p>人都傻了，不知道是不是哪个安全机制把他当病毒清理了，真服了，重装后惊喜发现因为有账号同步，本来下载的插件不需要自己手动重新下载，但是有个致命的问题是——我在删除idea 的时候，我的maven的仓库也莫名被删除了，导致maven找不到仓库没地方下载依赖和插件。我新创了之后还是不行，报的错误也不明确，最后找到了一篇教恢复maven仓库的博客救了我的命。具体教学如下：</p><p>运行cmd，然后执行 mvn help:system mvn将重新下载本地仓库</p><p>完成后运行mvn help:effective-settings 查看仓库位置</p><p>ps：需要注意的是这里的cmd是需要在项目文件的目录下运行。</p><p>属实是吓鼠我了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot笔记</title>
      <link href="/2023/10/08/spring-boot-bi-ji/"/>
      <url>/2023/10/08/spring-boot-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>突然又想学全栈开发，于是又看了几个小时的Spring Boot的入门。</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>花了我好多时间，其中卡了最久的一个问题就是maven的依赖下载不下来，导致pom.xml文件一直报错，后面搜索了很久。</p><p>有以下几个问题：</p><ol><li>jdk版本与maven版本不匹配，我的解决方案是降低jdk的版本，根据maven官方给的匹配表格进行配置。<a href="https://maven.apache.org/docs/history.html">链接</a></li></ol><p><img src="C:\Users\Lurume\AppData\Roaming\Typora\typora-user-images\image-20231008233410721.png" alt="image-20231008233410721"></p><p>我把我的jdk降低到了8的版本（谁能想到我21年末下载的17好像还不匹配）</p><p>2.本都仓库文件夹的权限给的不够。这个问题是个主要问题，导致每次依赖都下载不下来，或者下载不全。</p><p>我参考的是<a href="https://blog.csdn.net/weixin_43702243/article/details/124612152">【Maven】Maven本地仓库无法下载依赖解决方案_mvn 仓库管理不能下载_Jessica_FM的博客-CSDN博客</a></p><p>之后就是跟着视频配置项目</p><p>pom.xml文件：项目的依赖都加在里面，每次添加新的依赖都需要刷新下载。</p><p>application.properties：项目的配置文件，在里面添加配置语句</p><p>resource文件夹主要是放置静态文件和前端页面，但是如果采用前后端分离的方式的话一般用不到。</p><p>主要代码是写在java文件夹下，其中一般会有controller文件夹，可以在里面定义项目的控制器。</p><h3 id="开启热部署："><a href="#开启热部署：" class="headerlink" title="开启热部署："></a>开启热部署：</h3><p>主要是在application文件中添加以下两行代码：</p><pre class="line-numbers language-none"><code class="language-none">spring.devtools.restart.enabled&#x3D;truespring.devtools.restart.additional-paths&#x3D;src&#x2F;main&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后需要进行两个配置操作，值得注意的是在新版的idea里面注册表的操作是在设置打勾的。</p><p><strong>热部署的作用</strong>就是使得每次更改程序，程序会自动重新编译并运行，这样就节省了一些重复性的操作，使得可以直接刷新页面更新代码。</p><p>还学了一个Restful，这是一种风格框架，好像也没什么特别的。</p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>这个基本需要在每个项目中进行一次配置，但是配置方法很简单而且固定不变。</p><p><strong>首先</strong>在pom.xml文件中加入以下代码并更新依赖：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;&lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;&lt;version&gt;2.9.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;&lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;&lt;version&gt;2.9.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然后</strong>在java下创建文件夹config，并创建SwaggerConfig文件，在里面引入相应的库，并添加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">@Configuration &#x2F;&#x2F; 告诉Spring Boot容器，这个类是一个配置类@EnableSwagger2 &#x2F;&#x2F; 开启Swagger2功能public class SwaggerConfig &#123;    &#x2F;&#x2F; 配置Swagger2核心配置 docket    @Bean    public Docket createRestApi() &#123;        &#x2F;&#x2F; 指定API类型为Swagger2        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo()) &#x2F;&#x2F; 用于定义API文档汇总信息                .select()                .apis(RequestHandlerSelectors.basePackage(&quot;com&quot;))                .paths(PathSelectors.any()).build();    &#125;    &#x2F;&#x2F; API文档页面显示信息    private ApiInfo apiInfo() &#123;        return new ApiInfoBuilder()                .title(&quot;演示项目API&quot;) &#x2F;&#x2F; 文档页标题                .description(&quot;学习Swagger2的演示项目&quot;) &#x2F;&#x2F; 文档页描述                .version(&quot;1.0.0&quot;) &#x2F;&#x2F; 文档版本号                .build();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最后</strong>需要在application文件中添加一句话：</p><pre class="line-numbers language-none"><code class="language-none">spring.mvc.pathmatch.matching-strategy&#x3D;ant_path_matcher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置完毕！</p><p>之后的话我们运行主程序，然后在浏览器中访问<a href="http://localhost:8080/swagger-ui.html%E3%80%82%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0swagger%E7%9A%84%E7%95%8C%E9%9D%A2%E4%BA%86%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E8%B0%83%E8%AF%95%E7%95%8C%E9%9D%A2%E3%80%82">http://localhost:8080/swagger-ui.html。就可以看到swagger的界面了，是一个非常好用调试界面。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE学习笔记</title>
      <link href="/2023/10/04/vue-xue-xi-bi-ji/"/>
      <url>/2023/10/04/vue-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>假期无聊，就想着学点东西，害怕之后的大作业做不出来。写个博客记录一下学习。</p><p>我没有安装vue，我目前采用的是CDN</p><p>也就是在js或者html文件中插入一下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入包，使用的是开发版本 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后跟写了第一个实例代码，基本上就是vue最基本的操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入包，使用的是开发版本 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">// 一旦引入的vue 的核心包，在全局环境，就有了vue构造函数</span>        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">//通过el去配置选择器，指定VUE控制的是哪个盒子</span>            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            <span class="token comment">//通过data属性，来配置数据</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello vue'</span><span class="token punctuation">,</span>                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>今天下午学习了几个基本指令</p><ol><li><p>v-html: 改变innerHTML的值</p></li><li><p>v-show:通过设置css的display来实现元素的显示与隐藏</p></li><li><p>v-if：条件显示</p></li><li><p>v-else和v-else-if：与v-if连用</p></li><li><p>v-on：设置绑定事件。缩写为@</p></li><li><p>v-bind：设置标签的src、title等属性，使得其可变。缩写为：</p></li><li><p>v-for：循环多次渲染整个元素，经常和数组一起使用</p><p>语法：v-for &#x3D; “(item, index) in 数组” : key &#x3D; “item.id” (key很重要，基本必须使用)</p></li><li><p>v-model: 给表单元素使用，实现双向数据绑定。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软工第二次作业（洛谷爬虫）</title>
      <link href="/2023/09/15/ruan-gong-di-er-ci-zuo-ye-luo-gu-pa-chong/"/>
      <url>/2023/09/15/ruan-gong-di-er-ci-zuo-ye-luo-gu-pa-chong/</url>
      
        <content type="html"><![CDATA[<h4 id="ps：好像有些莫名的bug，刚写完测试时没问题，但是刚刚再测试发现好像有些bug会导致某些题目爬取出错，在助教评审时连前五十道题都没爬出来就很怪。也没精力再去更改了。"><a href="#ps：好像有些莫名的bug，刚写完测试时没问题，但是刚刚再测试发现好像有些bug会导致某些题目爬取出错，在助教评审时连前五十道题都没爬出来就很怪。也没精力再去更改了。" class="headerlink" title="ps：好像有些莫名的bug，刚写完测试时没问题，但是刚刚再测试发现好像有些bug会导致某些题目爬取出错，在助教评审时连前五十道题都没爬出来就很怪。也没精力再去更改了。"></a>ps：好像有些莫名的bug，刚写完测试时没问题，但是刚刚再测试发现好像有些bug会导致某些题目爬取出错，在助教评审时连前五十道题都没爬出来就很怪。也没精力再去更改了。</h4><p><a href="https://github.com/FZUlsy/luogu_reptile"><strong>我的GitHub仓库链接</strong></a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为了更好地提升代码能力，jason哥想要收集相应的题目，有针对性地刷题。而需要收集洛谷所有题目，但是工作量太大，所以jason哥急需大家<strong>运用爬虫技术，得到洛谷各种难度的题目和题解</strong>。考虑到近来流行的<strong>AIGC</strong>技术，jason哥认为，在AI的帮助下，这项工作的难度会大大降低。</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>项目的前端是利用tkinter配合gpt进行书写的，界面普普通通，长这样：</p><p><img src="https://img-community.csdnimg.cn/images/0cc1fcdc276c49d5a1ab3ce537724ad1.png" alt="img"></p><p><img src="https://img-community.csdnimg.cn/images/52cde13f2fc74d71a9d887cbf3a6e8d2.png" alt="img"></p><p>简洁明了。实际上本来想要加一些图片的，但是奈何时间不允许啊。</p><p>在爬取界面默认是爬取前五十道题题目，可以删掉进行更改为自己想要爬取的题目编号范围。点击爬取后会有文字输出，爬取完毕会跳转到筛选界面。</p><p>对于筛选界面也很简单，唯一一个我觉得特别一点的就是双击题目会打开题目对应的文件夹，这也是我对于作业要求中  “对于<strong>爬取的所有题目</strong>，将其<strong>”题目编号-标题“</strong>文件夹放到<strong>“题目难度-关键词”</strong>的目录下”  的理解吧，我认为这就是目录，双击就能打开。</p><p>对于按照难度和关键字进行搜索的功能，我采用的是字典加上遍历比较的方法，第一层先提取出相应难度的题目列表，然后遍历题目列表，在其中运用双重循环查看当下的题目在所有的关键字对应的题目列表中。就……挺暴力的。好在题量小也不会需要很长时间。</p><p>当然也是可以多次筛选的，这边有个问题就是我没有编写关键字的异常检测，来不及了……</p><p>在这次项目中主要运用的就是那些常规爬虫需要的技术，bs4、selenium、re等等python的库。</p><p>在爬取题解时我一开始用的是selenium配合ddddocr进行验证码识别登录，但是后面经过同学的指导，成功的实现了cookie登录，时间上是快了很多的。</p><h4 id="单元测试："><a href="#单元测试：" class="headerlink" title="单元测试："></a>单元测试：</h4><p>针对单元测试，我做的是unittest。我本来想说直接利用mock对整个程序的界面进行模拟输入测试，但是调试了半天搞不明白，一直报错，属实无奈。最终我把筛选的核心逻辑函数挑选出来进行单独测试，一共有五个测试点。实际上多设置几个点，然后让他随机搭配难度和关键字，应该会得到更全面的测试，但是我感觉我的程序是没有问题的。</p><p><img src="https://img-community.csdnimg.cn/images/e81f02aada9b4170805cce74d7fbbf7c.png" alt="image-20230915232052492"></p><p><img src="https://img-community.csdnimg.cn/images/18867d20ac224ec9bc9a4cca4efad29b.png" alt="image-20230915232117682"></p><p>最终是测试通过了：<img src="https://img-community.csdnimg.cn/images/0e6f0abc27ac48a49a44c576db6f68f3.png" alt="image-20230915232138379"></p><h4 id="AIGC："><a href="#AIGC：" class="headerlink" title="AIGC："></a>AIGC：</h4><table><thead><tr><th align="center">子任务</th><th align="left">预估哪些部分使用AIGC</th><th align="left">实际中哪些部分使用AIGC</th></tr></thead><tbody><tr><td align="center">爬取题目并保存</td><td align="left">总体框架，文件保存</td><td align="left">总体框架，文件保存</td></tr><tr><td align="center">爬取题解</td><td align="left">总体框架，文件保存，第一篇题解的提取</td><td align="left">总体框架，文件保存</td></tr><tr><td align="center">爬取标签关键词</td><td align="left">总体框架</td><td align="left">无</td></tr><tr><td align="center">制作GUI界面</td><td align="left">整体GUI界面框架，最终的UI美化</td><td align="left">UI美化</td></tr><tr><td align="center"><strong>总结</strong></td><td align="left">还是不太习惯使用AIGC，在实际使用中很多时候跳出的代码语句与我想要的不一样</td><td align="left"></td></tr></tbody></table><h4 id="体会："><a href="#体会：" class="headerlink" title="体会："></a>体会：</h4><p>​只能说非常后悔，没能把前端和爬虫的视频坚持看完，两个视频都看了一半了，尤其前端，跟着视频也写了非常多的实例代码，但是今年暑假没能坚持，没想到这么快就吃到苦头了。这几天最重要的体会就是：累鼠咯~~~建模国赛难度就是不一样，周日刚搞完建模，周一立马就转向作业，连轴转的感觉很充实就是了，有一种涤荡心灵的作用。我觉得这次作业学会最多的不是知识层面的，而是精神层面的，抗压能力和学习能力都大幅度提升。当然其实本质还是因为菜，不然也不会搞这么久就是了。</p><h4 id="PSP"><a href="#PSP" class="headerlink" title="PSP:"></a>PSP:</h4><table><thead><tr><th>项目开发阶段</th><th>预估耗时（分钟）</th><th>实际耗时（分钟）</th></tr></thead><tbody><tr><td>初步思路</td><td>30</td><td>5</td></tr><tr><td>爬题目</td><td>180</td><td>240</td></tr><tr><td>爬题解</td><td>180</td><td>360</td></tr><tr><td>爬标签</td><td>60</td><td>80</td></tr><tr><td>写前端</td><td>180</td><td>180</td></tr><tr><td>博客撰写</td><td>120</td><td>100</td></tr><tr><td>合计</td><td>750</td><td>965</td></tr></tbody></table><h4 id="个人评价："><a href="#个人评价：" class="headerlink" title="个人评价："></a>个人评价：</h4><p>实际上我理想中的项目应该是还要多很多东西的，至少也要有完善的异常检测机制，不过能做成这样也在接受范围之内了。我觉得这次的搜索界面和双击打开相应文件夹是做的比较好的，单元测试做的也算是比较完善了。对于筛选界面我是觉得应该没什么问题的，至少是能够满足要求的。。不足就在于容易出bug，还有就是我的cookie是要人为手动去复制粘贴的，并能完美的结合在一个函数中。还有就是没能空出时间针对爬虫程序设计并行算法，这个还是蛮想做出来的，这样子运行速度大幅度提高。还有就是copilot也没学会怎么用，实际上使用的不是很多，主要还是gpt用的比较多，毕竟在我们的建模队伍里我充当的是gpt调教手（代码）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023春汇编实验（拓展题）</title>
      <link href="/2023/09/06/2023-chun-hui-bian-shi-yan-tuo-zhan-ti/"/>
      <url>/2023/09/06/2023-chun-hui-bian-shi-yan-tuo-zhan-ti/</url>
      
        <content type="html"><![CDATA[<ol><li>删除一批数据中的重复数据，删除后的一批数据是互不相同的。</li></ol><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.datadat word 1,2,4,3,2,1p word 6 dup(?).codemain procmov ecx,6mov edx,0mov edi,0again1:mov esi,0mov ax,word ptr dat[edi*2]again2:cmp ax,word ptr p[esi*2]jz nextinc esicmp esi,edxjl again2mov word ptr p[edx*2],axinc edxnext:inc edicmp edi,ecxjnz again1mov esi,0pt:movzx eax,p[esi*2]call writeintcall crlfinc esicmp esi,edxjnz ptexitmain endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>有一批互不相同的有符号数，求出其中两数和的绝对值的最大值，要求输出最大值，以及这两个数。<br> 第一种（全正或全负）：5, 3, 2, 6, 1，和绝对值最大值是11，两个数是5, 6<br> 第二种（有负有正）：-3，2，-2，-4, 1, 5，和绝对值最大值是7，两个数：-3，-4及2，5</li></ol>  <pre class="line-numbers language-none"><code class="language-none">此代码有所缺陷，只能输出一组。如果有两组等大的，可以排序后比较头两位和尾两位的和的绝对值，如果等大则两组都输出。（我懒得改了include irvine32.inc.datadat dword 5,3,2,6,1max dword 0x dword ?y dword ?count dword ?.codemain procmov ecx,lengthof datmov count,ecxmov ecx,0again1:mov eax,dat[ecx*4]inc ecxcmp ecx,countjz ptmov esi,ecxagain2:mov edx,dat[esi*4]add edx,eaxcmp edx,0jg cpareneg edxcpare:cmp edx,maxjle nextmov max,edxmov edx,dat[esi*4]mov x,edxmov y,eaxnext:inc esicmp esi,countjnz again2cmp esi,countjz again1pt:mov eax,maxcall writeintcall crlfmov eax,xcall writeintcall crlfmov eax,ycall writeintexitmain endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  3、从键盘输入两个非0的无符号数，要求用子程序实现<a href="https://so.csdn.net/so/search?q=%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0&spm=1001.2101.3001.7020">求两个数的最大公约数</a>和最小公倍数。</p>  <pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.datax dd ?y dd ?max dd ?min dd ?.codemain proccall readintmov x,eaxcall readintmov y,eaxpush xpush ypush offset maxpush offset mincall mpublicmov eax,maxcall writeintcall crlfmov eax,mincall writeintexitmain endp  mpublic procpush ebpmov ebp,esppush eaxpush ecxpush edxpush ebx mov eax,dword ptr [ebp+20];x的值mov ecx,dword ptr [ebp+16];y的值mov edx,dword ptr [ebp+12];max的地址mov ebx,dword ptr [ebp+8];min的地址again:cmp eax,ecxja nextxchg eax,ecxnext:sub eax,ecxcmp eax,0jnz againmov [edx],ecxmov eax,[ebp+20]mov ecx,[ebp+16]mul cl;x*ymov ecx,[edx]div cl;x*y&#x2F;maxmov [ebx],eax pop ebxpop edxpop ecxpop eaxpop ebpret 16mpublic endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  4、从键盘输入字符串，查找是否包含指定子字符串’abc’</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.datadat byte 10 dup(?)count dword ?.codemain procmov edi,0lea edx,datmov ecx,10call readstringmov count,eaxmov esi,0 again:mov ecx,esicmp dat[ecx],61hjnz nextinc ecxcmp dat[ecx],62hjnz nextinc ecxcmp dat[ecx],63hjnz nextinc edijmp ptnext:inc esicmp esi,countjnz againpt:mov eax,edicall writeintexitmain endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023春汇编实验</title>
      <link href="/2023/09/06/2023-chun-hui-bian-shi-yan/"/>
      <url>/2023/09/06/2023-chun-hui-bian-shi-yan/</url>
      
        <content type="html"><![CDATA[<p>实验一 熟悉上机环境、顺序程序设计</p><p>1、 上机题目：两个32位数的相加运算   内容： DAT开始的单元中存放两个32位二进制  数，两个数相加后结果存入SUM单元中。   （ SUM为32位 ）  </p><p> DAT  DWORD  X1,X2（自己设定数据）    </p><p>SUM DWORD  ?</p><p>要求： 1）熟悉上机环境              2）熟练掌握简单的顺序程序设计方法</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.data  dat dword 11223344h,44556677h  sum dword ?.code  main proc  mov eax,dword ptr dat  add eax,dword ptr dat+4  mov dword ptr sum,eax  exit  main endp  end main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验  二 分支程序设计  </p><p>1、上机题目：  求最大数  内容：DAT开始的字单元中存放N（N&gt;1）个有符号数，求出最大数存入MAX单元中。</p><p>DAT  word   X1,……,XN（数据自己设定）</p><p>MAX  word   ?</p><p>  要求：熟练掌握分支程序设计方法</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.data  dat word x1,...,x2  max word ?.code  main proc  mov ecx,lengthof dat-1  mov esi,0  mov ax,dat[esi]again:  add esi,2  cmp ax,dat[esi]  jnl next  mov ax,dat[esi]next:  dec ecx  jnz again  mov max,ax  mov eax,dword ptr max  call writeint  exit  main endp  end main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实验（三） 循环程序设计</p><p>1、上机题目：数据查找  内容：TAB开始的字节单元中存放N个无符号数，dat单元存放一个已知数据X，现从TAB中查找是否存在数据X，如果存在，NO单元存放该数据在TAB中的序号，否则NO单元存放0FFH 。</p><p>TAB byte   X1,……,XN（数据自己设定）</p><p>dat   byte   x</p><p>no    byte   ?</p><p>要求：1）熟练掌握循环程序设计方法             2）理解循环判断条件    </p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.datatab byte x1,....,x2dat byte ?no byte ?.codemain procmov edl,0mov ecx,lengthof tabmov esi,0mov eax,datagain:cmp tab[esi],aljz EXT1inc esiinc dldec ecxcmp ecx,0jnz againEXT1:jecxz Nfoundfound:mov no,dljmp EXT2Nfound:mov no,0ffhEXT2:movsx eax,nocall writeintexitmain endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上机题目：无符号数排序    </p><p>内容：TAB开始的单元中存放N（N&gt;1）个字节无符号数，请按照从大到小排序后，存入DAT单元中。（注意:TAB数据保持不变）</p><p>TAB  byte   X1,……,XN（数据自己设定）</p><p>DAT  byte   N DUP(?)</p><p>要求：1）熟练掌握循环程序设计方法               2） 理解循环判断条件               3） 熟练掌握双重循环结构</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.datatab byte x1,....,x2dat byte n DUP(?).codemain procmov ecx,lengthof tabcopy:mov al,tab[ecx]mov dat[ecx],alloop copymov al,tab[ecx]mov dat[ecx],almov ecx,lengthof tabdec ecxagain1:mov edi,ecxmov ebx,0again2:mov al,dat[ebx]cmp al,dat[ebx+1]jae nextxchg al,dat[ebx+1]mov dat[ebx],alnext:inc ebxdec ecxcmp ecx,0jnz again2mov ecx,edidec ecxcmp ecx,0jnz again1mov ecx,lengthof datmov esi,0pt:mov al,dat[esi]call writehexcall crlfinc esicmp esi,ecxjnz ptexitmain endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验 四 子程序设计 </p><ol><li>上机题目：代码转换</li></ol><p> 内容：用子程序设计的方法，分别把BUF字单元中的四位十六进制数转换为ASCII码存入MAS开始的单元中，并在终端上显示MAS开始的4个字节单元。</p><p>BUF  word    X</p><p>MAS  byte 4 DUP(?)</p><p>要求：1）熟练掌握子程序设计方法               2）掌握参数传递方法               3）掌握子程序获取参数方法</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.databuf word ?mas byte n dup(?).codemain procpush bufpush offset mascall decbinexitmain endpdecbin procpush ebpmov ebp,esppush esipush eaxpush ecxpush edxpush ebxmov esi,0mov ecx,4mov ebx,[ebp+12]mov edi,[ebp+8]again:mov dx,word ptr [ebx]rol dx,4mov word ptr [ebx],dxand dl,0fhcmp dl,0ahjb numadd dl,7num:add dl,30hmov byte ptr [edi+esi],dlmovzx eax,dlcall writeintcall crlfinc esidec ecxcmp ecx,0jnz againpop edxpop ebxpop ecxpop eaxpop esipop ebpret 8decbin endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上机题目2：键盘输入</p><p>内容：从键盘输入一串字母并保存在string开始的地址单元，要求将该字符串中的大写字母转化为小写字母后用子程序实现，在终端上依次显示该串字母的 ASCII码。</p><p> string byte   n  dup(?)</p><p>要求：1）熟练掌握子程序设计方法，会画子程序、主程序流程图               2）掌握参数传递方法以及子程序获取参数的方法</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.datastring byte n dup(?)count dd ?.codemain proclea edx,stringmov ecx,10call readestringmov count,eaxcall changemov ecx,0pt:movzx eax,string[ecx]inc ecxcall writeintcall crlfcmp ecx,countjnz ptmain endpchange procpush esipush edxpush ecxpush eaxmov esi,0again1:mov dl,string[esi]cmp dl,61hjnb again2add dl,20hmov string[esi],dlagain2:inc esicmp esi,countjnz again1pop eaxpop ecxpop edxpop esiretchang endpend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验（五） 综合程序设计</p><p>1、上机题目：将从键盘输入的N个无符号数保存到数组DAT ，找出N个无符号数中的偶数存放到数组P，统计并在终端上显示数组P的数据个数no。  </p><p>DAT  word   n dup (?)  </p><p>P    word   n dup (?)  </p><p>no    word   ？</p><p>要求：1、求偶数数组P的功能用子程序实现              2、画主程序及子程序流程图              3、熟练掌握综合程序设计方法</p><pre class="line-numbers language-none"><code class="language-none">include irvine32.inc.dataDAT word n dup(?)p word n dup(?)no word ?.codemain proccall readintmov ecx,eaxpush ecxmov esi,0cin:call readintmov dat[esi],axadd esi,type datloop cin   ​         push offset dat​         push offset p​         call pno​         mov ax,no​         call writeint​         exit​         main endp​         ​     pno proc​     push ebp​     mov ebp,esp​     push eax​     push ecx​     push edx​     push esx​     push ebx​     mov ecx,[ebp+16]​     mov ebx,[ebp+12]​     mov esi,[ebp+8]​     again1:​     mov dx,[ebx]​     and dl,1​     cmp dl,0​     jne next​     mov dx,[ebx]​     mov [esi],dx​     add esi,type p​     inc no​     next:​     add ebx,type dat     loop again​     pop esx​     pop ebi​     pop edx​     pop ecx​     pop eax​     pop ebp​     ret 12​     pno endp​     end main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​     2、上机题目：将从键盘输入的N个有符号数保存到数组TAB ，找出N个有符号数中绝对值大于X的最小负奇数存放到Min单元，如果没有找到则Min单元存放0。在终端上显示Min的绝对值。              TAB  Dword   n dup(?)  </p><p>​      X       Dword   xx(无符号数，自己设定)</p><p>​      Min    Dword   ？</p><p>​     要求：1、求数据Min的功能用子程序实现              2、画主程序及子程序流程图              3、熟练掌握综合程序设计方法</p><pre class="line-numbers language-none"><code class="language-none">     include irvine32.inc​     N&#x3D;8​     .data​     tab dd N dup(?)​     x dd 5​     min dd ?​     .code​     main proc​     mov ecx,N​     mov esi,0​     cin:​     call readint​     mov dword ptr tab[esi],eax​     add esi,4​     loop cin​         ​         mov ecx,N​         push ecx​         lea edi,tab​         push edi​         push x​         lea edi,min​         push edi​         call qmin​          ​     mov eax,min​     call writeint​     exit​     main endp​     ​     qmin proc​     push ebp​     mov ebp,esp​     push eax​     push ecx​     push edx​     push edi​     push esi​     ​     mov ecx,dword ptr [ebp+20];N​     mov esi,dword ptr [ebp+16];tab​     mov edi,dword ptr [ebp+12];x​     mov edx,dword ptr [ebp+8];min​     ​     again:​     mov eax,dword ptr [esi]​     test eax,1​     je next​     test eax,8000000h​     je next​     neg eax​     cmp eax,edi​     jbe next​     neg eax​     ​     cmp eax,dword ptr [edx]​     jge next​     mov dword ptr [edx],eax​     ​     next:​     add esi,4​     loop again​         ​         pop esi​         pop edi​         pop edx​         pop ecx​         pop eax​         pop ebp​         ret 16​         qmin endp​         ​     end main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​     原文链接：<a href="https://blog.csdn.net/Lurume/article/details/129997995">https://blog.csdn.net/Lurume/article/details/129997995</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一个自动填写问卷小程序</title>
      <link href="/2023/09/06/yi-ge-zi-dong-tian-xie-wen-juan-xiao-cheng-xu/"/>
      <url>/2023/09/06/yi-ge-zi-dong-tian-xie-wen-juan-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding = utf-8 -*-</span><span class="token comment"># @Time : 2022/11/2 12:39</span><span class="token comment"># @Author : Lurume</span><span class="token comment"># @File : 自动填写（edge.py</span><span class="token comment"># @Software : PyCharm</span><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Byurl <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输入问卷网址</span>option <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>EdgeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.26"'</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-blink-features=AutomationControlled'</span><span class="token punctuation">)</span><span class="token comment">#option.add_experimental_option('excludeSwitches', ['enable-automation'])</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'useAutomationExtension'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'ws-textarea__inner'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">)</span>       <span class="token comment"># 姓名</span>driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'ws-textarea__inner'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"15******75"</span><span class="token punctuation">)</span><span class="token comment"># 填写电话号码</span>driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'ws-textarea__inner'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"10******1"</span><span class="token punctuation">)</span> <span class="token comment"># 学号</span>driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'ws-textarea__inner'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"20*******2"</span><span class="token punctuation">)</span><span class="token comment"># QQ号</span>button <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'ws-radio__input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click();"</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span> <span class="token comment"># 勾选按钮</span>bt <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'ws-radio__input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].click();"</span><span class="token punctuation">,</span> bt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码是我在去年抢核酸志愿者时，利用selenium加上当时所掌握的一点点前端知识编写的，非常的简陋，但这是我第一次将代码实际应用起来，纪念一下。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
